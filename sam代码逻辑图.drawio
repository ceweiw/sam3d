<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36 Edg/133.0.0.0" version="26.0.16">
  <diagram name="第 1 页" id="3LIhNiNdbvlaEGooOemI">
    <mxGraphModel dx="2465" dy="827" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="JtS80HCV9RCk1BCbZoH8-6" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="JtS80HCV9RCk1BCbZoH8-1" target="JtS80HCV9RCk1BCbZoH8-5" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;&quot;&gt;main里面先进行参数的获取，&lt;/font&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;mask_generator是sam2d的一个掩码生成对象，最后获取了场景名称，seg_pcd分别对一个个场景进行处理&lt;/span&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-190" y="555" width="300" height="150" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-10" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="JtS80HCV9RCk1BCbZoH8-5" target="JtS80HCV9RCk1BCbZoH8-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-19" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="JtS80HCV9RCk1BCbZoH8-5" target="JtS80HCV9RCk1BCbZoH8-18" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-5" value="&lt;span style=&quot;font-size: 18px; text-wrap-mode: nowrap;&quot;&gt;&lt;font&gt;seg_pcd：&lt;/font&gt;&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px; text-wrap-mode: nowrap;&quot;&gt;&lt;font&gt;①先获取该场景中的所有color&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 18px; text-wrap-mode: nowrap; background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;图，&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px; text-wrap-mode: nowrap; background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;使用get_pcd获取点云，pcd_list&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px; text-wrap-mode: nowrap;&quot;&gt;&lt;font&gt;中包含该场景的所有点云&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px; text-wrap-mode: nowrap;&quot;&gt;&lt;font&gt;②&lt;/font&gt;&lt;/span&gt;&lt;font style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;font-size: 18px; text-wrap-mode: nowrap;&quot;&gt;while循环使用&lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;cal_2_scenes进行BM的过程.(&lt;/font&gt;&lt;/span&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;visualGroup.py对seg_pcd循环调用get_pcd生成的pcd_list进行了可视化，&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;&lt;font face=&quot;Helvetica&quot; style=&quot;font-size: 18px;&quot;&gt;pthinfo.py对pcd_list中的帧的分组信息进行了统计&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: light-dark(rgb(255, 255, 255), rgb(18, 18, 18)); color: light-dark(rgb(8, 8, 8), rgb(230, 230, 230)); font-size: 18px;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="437" y="540" width="390" height="180" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-8" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;seg_pcd是对单独的一个一个场景处理的&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="100" y="585" width="340" height="40" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-9" value="&lt;div&gt;&lt;font&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;get_pcd获取了相关文件的路径，并记录了深度值不为0的&lt;b&gt;有效区域&lt;/b&gt;，使用sam2d进行了分割并保存了结果，之后利用pose和相机内外参，将2d坐标转换为3d的世界坐标。返回的是这个帧的信息：坐标，颜色值，分组&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;code style=&quot;&quot; data-end=&quot;1158&quot; data-start=&quot;1151&quot;&gt;&lt;font face=&quot;Helvetica&quot;&gt;color&lt;/font&gt;&lt;/code&gt; 变量在这里的含义就是&lt;span style=&quot;font-family: Helvetica;&quot; data-end=&quot;1185&quot; data-start=&quot;1170&quot;&gt;点云中每个点的颜色信息&lt;/span&gt;，它来自原始的彩色图像，并与深度图像中有效的像素点一一对应。这个 &lt;code style=&quot;font-family: Helvetica;&quot; data-end=&quot;1225&quot; data-start=&quot;1218&quot;&gt;color&lt;/code&gt; 信息将用于点云的可视化，确保每个点根据原始图像的颜色进行渲染。&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1120" y="555" width="590" height="150" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-11" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;还有一个问题就是 在get_pcd这生成的掩膜（可以在sam2d看到）为什么是黑白的 代表什么含义呢&lt;/font&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;主要是这个白色部分 是什么含义&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;jxy说她看看代码&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="540" y="270" width="360" height="130" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-12" value="&lt;span style=&quot;color: rgb(8, 8, 8); font-size: 18px; text-wrap-mode: wrap; background-color: rgb(255, 255, 255);&quot;&gt;get_pcd是对一张一张图像处理的&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="810" y="610" width="290" height="40" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-22" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="JtS80HCV9RCk1BCbZoH8-18" target="JtS80HCV9RCk1BCbZoH8-21" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-18" value="&lt;font style=&quot;font-size: 18px;&quot; face=&quot;Helvetica&quot;&gt;while循环：&lt;/font&gt;&lt;div&gt;&lt;font size=&quot;3&quot; face=&quot;Helvetica&quot;&gt;对一个场景中的帧进行合并，直到只剩下一帧 就是最终的结果，合并后根据阈值th进行了分组的移除&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot; face=&quot;Helvetica&quot;&gt;合并主要是&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;cal_2_scenes在做&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="437" y="780" width="390" height="110" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-20" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;while循环&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="620" y="730" width="100" height="40" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-24" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="JtS80HCV9RCk1BCbZoH8-21" target="JtS80HCV9RCk1BCbZoH8-23" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-27" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="JtS80HCV9RCk1BCbZoH8-21" target="JtS80HCV9RCk1BCbZoH8-26" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-21" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;color: rgb(8, 8, 8); background-color: rgb(255, 255, 255);&quot;&gt;cal_2_scenes获取两帧点云后，将其转换为open3d的格式。&lt;/span&gt;&lt;/font&gt;&lt;div&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;color: rgb(8, 8, 8); background-color: rgb(255, 255, 255);&quot;&gt;之后是调用①&lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;get_matching_indices进行两帧之间的匹配；②&lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(8, 8, 8);&quot;&gt;cal_group是在更新组标记。结束之后进行了两个帧的信息合并，合并之后返回作为得到的新帧去while循环&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="438" y="970" width="390" height="140" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-23" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;这个是在util.py中实现的，在pointtops下的functions下的query.py中进行了knn_query=KNNQuery.apply的赋值，也即调用knn_query就是调用KNNQuery类的forward方法。最终调用的是knn_query_cuda_kernel函数&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1020" y="970" width="390" height="140" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-25" value="&lt;span style=&quot;color: rgb(8, 8, 8); font-size: 18px; text-wrap-mode: wrap; background-color: rgb(255, 255, 255);&quot;&gt;cal_2_scenes&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="630" y="913" width="130" height="40" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-26" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;cal_group中根据得到的匹配关系进行查询，对于每对匹配关系，查看分别是哪个组，得到group_overlap{97: {20: 4}, 114: {76: 40}, 98: {64: 3}, 113: {75: 31}}这样的结果，然后遍历每一个键去找最大的对应数，若符合条件，则将20更新为97，这一部分是仅针对于匹配的点（这里的一些记录在qq有截图）&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="438" y="1169" width="390" height="151" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-28" value="&lt;span style=&quot;color: rgb(8, 8, 8); font-size: 18px; text-wrap-mode: wrap; background-color: rgb(255, 255, 255);&quot;&gt;cal_group&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="630" y="1120" width="100" height="40" as="geometry" />
        </mxCell>
        <mxCell id="JtS80HCV9RCk1BCbZoH8-29" value="&lt;span style=&quot;color: rgb(8, 8, 8); font-size: 18px; text-wrap-mode: wrap; background-color: rgb(255, 255, 255);&quot;&gt;get_matching_indices&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="820" y="1003" width="200" height="40" as="geometry" />
        </mxCell>
        <mxCell id="kQHvF9xDawDUJMjNZoch-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;Q：为什么前后帧的分类结果不一样&lt;/font&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;A：①验证了未合并之前的分类结果，前后帧中对于同一个物体分类是不一样的，需要靠后面的BM来进行统一&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;②：对匹配过程进行了调试，它的匹配结果非常少 只有1-2百个匹配关系，但是原数据集的匹配关系8000多个点可以由七千多对&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;③：可以确定原因是没匹配到多少关系，造成的原因主要是稠密度，深入阅读了匹配关系的代码，其实就是根据世界坐标进行匹配，找到一个最近的点检查距离，若小于一定的阈值则作为匹配关系。&amp;nbsp; 稠密 动态物体&amp;nbsp; &amp;nbsp; （当前的匹配就是遍历另一个帧中一个批次的点，维护了一个大根堆，找当前k小的点进行匹配，这里k=1）&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="940" y="1130" width="480" height="230" as="geometry" />
        </mxCell>
        <mxCell id="kQHvF9xDawDUJMjNZoch-3" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;这里为什么维护一个最大堆 是因为我们要找最小的nsample个距离 维护大根堆就可以知道当前要加进来的是不是比最大的大 比最大的大就把堆顶去掉&amp;nbsp; 把新的数字加进来 再调整为大根堆&amp;nbsp; 如果是小根堆的话 根本不知道要不要加进去&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="1440" y="1169" width="430" height="130" as="geometry" />
        </mxCell>
        <mxCell id="kQHvF9xDawDUJMjNZoch-5" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;他这里的匹配就是根据点的坐标去进行距离的计算 算到小于规定的阈值就是一对匹配对&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="940" y="1370" width="480" height="80" as="geometry" />
        </mxCell>
        <mxCell id="5p2hWQ7ByvtlCYFSnNdF-2" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;①深度值是根据点云得来的，如果点在相机后方、位于图像外，或者深度值小于 min_dist，则该点的深度值为0，代表该像素没有有效的深度信息。&lt;/font&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;②注释掉一次合并 只单项合并出来的效果没有双向的好&lt;/span&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="1460" y="1350" width="710" height="110" as="geometry" />
        </mxCell>
        <mxCell id="YbVBPKZVBPdx36x0C7TW-1" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;为什么要进行双向的合并：在匹配关系中，因为两帧区域中的点可能不同，所以得到的匹配关系是不一样的。因此首先用第一帧来更新了第二帧，更新过程中可能很多id都会对应到同一个，这样的话，就被一个切割的零碎的物体恢复成一个了。然后以这个更新后的完整的第二帧，再去更新第一帧中的分组信息，主要还是匹配关系不同所以才需要进行双向的合并。&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;更新后两帧中是一个物体的分组id也是相同的，被过分割的物体也会恢复正常。&lt;/span&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="940" y="1460" width="490" height="210" as="geometry" />
        </mxCell>
        <mxCell id="9FLsO_nRd82xoy3qNYGG-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;BM过程：①遍历pcd0为pcd1的每个点找匹配点，得到match_inds后进而得到group_overlap类似图里面这样的结果。根据pcd0去修改pcd1的分组id，&lt;/font&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;②反向的时候是遍历pcd1为pcd0中的每个点找到匹配的点，根据前面更新后的pcd1去更新pcd0的值&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;③反向更新后对于一个物体前后帧就是一致的&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Q：至于为什么要双向主要还是因为得到的匹配关系是很不一样的&amp;nbsp; 要利用这个关系去修正分组&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="1500" y="1480" width="490" height="210" as="geometry" />
        </mxCell>
        <mxCell id="9FLsO_nRd82xoy3qNYGG-2" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;一个是匹配关系少（稠密化）&lt;/font&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;一个是动态物体不在匹配关系中（动态物体）&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="530" y="1390" width="330" height="120" as="geometry" />
        </mxCell>
        <mxCell id="9FLsO_nRd82xoy3qNYGG-3" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;先讲总体过程&lt;/font&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;讲中间结果的观察&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;讲BM的两个流程&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;讲数据的问题&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;（选择性讲）&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;BM具体的流程&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;为什么要双向&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="560" y="1560" width="300" height="180" as="geometry" />
        </mxCell>
        <mxCell id="9FLsO_nRd82xoy3qNYGG-4" value="" style="endArrow=none;html=1;rounded=0;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="-283.3333740234375" y="1800" as="sourcePoint" />
            <mxPoint x="2063.333251953125" y="1800" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="9FLsO_nRd82xoy3qNYGG-5" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;Q1：这样进行稠密化之后，并不能提供更多的有效信息，除非稠密化之后再投回图像再进行一次分割&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;验证了一下，稠密化抽帧之后再投进去没有任何的作用&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Q2：对于使用3dbox真值去去掉动态物体来说 这里的点云是投出来的，不能确定坐标是否一致&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;①目前完成了稠密&amp;nbsp; 发现没用&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;接下来就是先用gt去掉动态的物体 先做一个效果&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;②动态物体是能去掉的 但是对于总体效果来说看着不大 不过也是必须的步骤 效果还是要先稠密&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;再调研一下怎么样可以使转换的时候点云更稠密一些&lt;/span&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="-350" y="1820" width="810" height="180" as="geometry" />
        </mxCell>
        <mxCell id="l8Teo_1bZM88xix4W6jo-3" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;对于路面来说的问题主要有：路面是环形的，且越远越稀疏，所以第二帧和第一帧重叠的部分是第一帧稀疏的地方和第二帧稠密的地方 所以坐标上对应上的点是很少的&lt;/span&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="-350" y="2030" width="690" height="90" as="geometry" />
        </mxCell>
        <mxCell id="uKXoaIHHPF0KLf4nFBQf-1" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;对于指标来说，首先使用计算真是类别和预测id的IOU&amp;nbsp; &amp;nbsp;之后以这个为权重 用匈牙利算法求解最优匹配来得到语义标签&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;对于这个重叠点数 可能根据点的坐标来进行计算&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;（先提取每个类 拿出坐标之后进行匹配计算 再分别计算独自的分类有多少点）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;这个指标参考的是：&lt;/span&gt;&lt;span style=&quot;background-color: transparent; font-size: 18px;&quot;&gt;香港理工提出GrowSP：3D场景的无监督语义分割&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; font-size: 18px;&quot;&gt;但具体的他只说用匈牙利算法&amp;nbsp; 没有说边的权重是什么&lt;/span&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="-350" y="2150" width="730" height="158" as="geometry" />
        </mxCell>
        <mxCell id="uKXoaIHHPF0KLf4nFBQf-2" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,;" parent="1" vertex="1">
          <mxGeometry x="-68.96000000000001" y="2420" width="687.92" height="97.12" as="geometry" />
        </mxCell>
        <mxCell id="uKXoaIHHPF0KLf4nFBQf-4" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;指标部分可以检索无监督语义分割相关的论文 应该都会有这个问题的&lt;/span&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="380" y="2190" width="280" height="90" as="geometry" />
        </mxCell>
        <mxCell id="uKXoaIHHPF0KLf4nFBQf-5" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;TODO：&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;这个稠密化可能要去做深度的稠密化 需要去调研深度图相关的东西&lt;/span&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d80073;strokeColor=#A50040;fontColor=#ffffff;align=left;" parent="1" vertex="1">
          <mxGeometry x="680" y="2420" width="580" height="80" as="geometry" />
        </mxCell>
        <mxCell id="uKXoaIHHPF0KLf4nFBQf-6" value="&lt;font style=&quot;font-size: 15px;&quot;&gt;再进行稠密的时候没有遇到什么问题 但是效果不行&lt;/font&gt;&lt;div&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;在进行3d box去除的时候 先是因为pc变量是nuscenes自己定义的 导致格式对不上 后来是因为坐标系没在一个下导致一直去不掉&amp;nbsp;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;在进行地面稠密化的时候就更惨了 显示在数据集生成的时候稠密化 但是深度图对不上&amp;nbsp; 后来在sam中进行稠密 但是格式出来很多问题&amp;nbsp; 后来直接runtimeerror&amp;nbsp; 再后来调通之后更新的分组之后一个 调试之后发现是变量参数没有给对&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;只进行地面统一的时候，由于抽离再拼接导致坐标和id对不上，出问题&lt;/span&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;align=left;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="550" y="1835" width="470" height="165" as="geometry" />
        </mxCell>
        <mxCell id="HXuCBgKW5fqEcZRGuFm9-1" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;TODO：&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;第一个是去看&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 18px; text-align: center; background-color: transparent;&quot;&gt;GrowSP论文的具体的细节 看一下评测的指标具体是怎么弄的&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-size: 18px; text-align: center; background-color: transparent;&quot;&gt;第二个就是找到为什么他路面的前后分割会不一致 为什么有分段性的结果 找到sam3d BM的缺陷&amp;nbsp; 然后利用先验的知识改进&lt;/span&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d80073;strokeColor=#A50040;fontColor=#ffffff;align=left;" parent="1" vertex="1">
          <mxGeometry x="680" y="2540" width="580" height="130" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-7" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="-arGailqpxFbJRoSAnPw-1" target="-arGailqpxFbJRoSAnPw-2" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-1" value="&lt;h3 data-end=&quot;85&quot; data-start=&quot;61&quot;&gt;获得 Primitive 中心&lt;/h3&gt;&lt;h3 data-end=&quot;85&quot; data-start=&quot;61&quot;&gt;&lt;strong style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); font-size: 12px;&quot; data-end=&quot;102&quot; data-start=&quot;88&quot;&gt;加载预训练线性分类器&lt;/strong&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;85&quot; data-start=&quot;61&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); font-size: 12px; font-weight: normal;&quot;&gt;代码中首先加载了一个线性层（&lt;/span&gt;&lt;code style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); font-size: 12px; font-weight: normal;&quot; data-end=&quot;128&quot; data-start=&quot;123&quot;&gt;cls&lt;/code&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); font-size: 12px; font-weight: normal;&quot;&gt;），其权重代表模型学习到的 primitive 中心，形状为 &lt;/span&gt;&lt;code style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); font-size: 12px; font-weight: normal;&quot; data-end=&quot;187&quot; data-start=&quot;159&quot;&gt;[primitive_num, feats_dim]&lt;/code&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); font-size: 12px; font-weight: normal;&quot;&gt;。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;85&quot; data-start=&quot;61&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); font-size: 12px; font-weight: normal;&quot;&gt;这些 primitive 中心本身没有直接语义含义，只是模型在训练过程中学到的聚类原型。&lt;/span&gt;&lt;/h3&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1060" y="2035" width="360" height="185" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-8" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="-arGailqpxFbJRoSAnPw-2" target="-arGailqpxFbJRoSAnPw-4" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-2" value="&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;聚类 Primitive 得到语义类别&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;KMeans 聚类利用 KMeans 算法将 primitive 中心聚类成 args.semantic_class 个簇（聚类数等于真实语义类别数）。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;每个 primitive（即每一行的权重向量）被分配了一个聚类标签，称为 cluster_pred。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;计算每簇的中心（Centroids）对于每个聚类（也就是每个语义类别），代码将属于该簇的所有 primitive 中心取均值，得到该语义类别的中心向量。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;得到的中心向量经过归一化，使得后续计算内积时能等价于计算余弦相似度。&lt;/span&gt;&lt;/h3&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1538" y="2000" width="530" height="230" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-3" value="从模型输出的 primitive 分组 → KMeans 聚类得到语义类别中心 → 构造固定分类器映射点特征到语义类别 → 最后通过后处理（Hungarian matching）对齐预测标签与真实语义标签。" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1390" y="1880" width="370" height="60" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-4" value="&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;构造固定分类器映射到语义标签&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;构造分类器调用 get_fixclassifier 函数，利用上一步计算的归一化中心构造一个固定的线性分类器，其权重被直接设置为这些中心。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;这个固定分类器不会更新，其作用是将模型提取到的点级特征映射到预定义的语义类别上。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;分类过程在测试时，模型提取出点级特征后，同样对特征做归一化，并通过 F.linear 计算每个点与每个语义中心的相似度（内积），最后用 argmax 选出得分最高的类别作为预测标签。&lt;/span&gt;&lt;/h3&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="2130" y="2000" width="530" height="230" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-5" value="&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;利用评估流程将预测标签对齐真实语义&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;混淆矩阵构造得到预测标签后，代码构造了一个混淆矩阵：每个元素表示真实标签 iii 被预测为 jjj 的样本数。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;这里通过表达式 sem_num * all_labels + all_preds 将 (真实标签, 预测标签) 对映射成一维索引，再利用 np.bincount 统计。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;Hungarian 算法匹配由于预测标签的编号是无序的（即模型输出的类别编号和数据集中真实语义编号不一定对应），因此使用匈牙利算法进行最佳匹配。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;具体方法：先构造一个“代价矩阵”（histogram.max() - histogram），使得原来匹配得越好的对应边成本越低；然后用 linear_assignment 求解最优匹配。&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-end=&quot;274&quot; data-start=&quot;246&quot;&gt;&lt;span style=&quot;font-size: 14.04px;&quot;&gt;匹配结果 mmm 表示最佳的预测类别和真实类别的对应关系，进而计算出整体准确率、各类别准确率以及 IoU 等指标。&lt;/span&gt;&lt;/h3&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1850" y="2338" width="530" height="282" as="geometry" />
        </mxCell>
        <mxCell id="-arGailqpxFbJRoSAnPw-6" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.537;entryY=0.009;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="-arGailqpxFbJRoSAnPw-4" target="-arGailqpxFbJRoSAnPw-5" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="GaN4jN02Bce2NCk_VufV-1" value="&lt;div&gt;&lt;font style=&quot;font-size: 14px; color: rgb(255, 0, 0);&quot;&gt;关于指标&lt;/font&gt;&lt;/div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;大概的过程是：构建一个方阵，i行j列代表的是：真实语义标签i被预测为id j的数量。然后用这个矩阵中最大的数减去每个元素作为代价矩阵，然后使用Hungarian进行匹配。&lt;/font&gt;&lt;div&gt;&lt;font size=&quot;3&quot;&gt;那其实也就是计算了预测与真实重叠的数量，只不过论文是用最大的直接减去各元素作为成本（其实就是看重叠数量最多了）。改进：可以改进为计算iou&amp;nbsp; 在上述计算&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;预测与真实重叠的数量的基础上 除以（预测+真实-重叠）来作为成本，这样对于那种真实语义标签对应的两个数量一样的预测id有效。&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;font size=&quot;3&quot;&gt;对于如何计算每个点对对应的真实标签和预测标签：有一个真实标签数组，还有一个预测标签数组 且顺序是一一对应的&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="1320" y="2430" width="460" height="230" as="geometry" />
        </mxCell>
        <mxCell id="Aaq_GdSLGYO0YYf0CYgu-1" value="&lt;div&gt;&lt;font style=&quot;font-size: 14px; color: rgb(255, 0, 0);&quot;&gt;关于BM问题&lt;/font&gt;&lt;/div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;BM对于长距离失效的原因：因为在合并的过程中是按照2的n次方来合在一起的，第3次的时候就已经是前4帧和后4帧一起合并，那么这时候中间重叠的部分不足以满足那个合并的条件 就不会进行合并&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="1310" y="2680" width="460" height="100" as="geometry" />
        </mxCell>
        <mxCell id="Aaq_GdSLGYO0YYf0CYgu-2" value="&lt;div&gt;&lt;font style=&quot;font-size: 14px; color: rgb(255, 0, 0);&quot;&gt;关于改进&lt;/font&gt;&lt;/div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;①改进融合的顺序 最起码能好一点；&lt;/font&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;②将出来的东西进行聚类 聚类之后作为先验信息进行BM融合；（不可以 聚类出来的效果很不好）&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;③去除分组为-1的点&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="1310" y="2830" width="460" height="100" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
